// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: way/v1/way.proto

package wayv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "way2ski-backend/gen/way/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WayServiceName is the fully-qualified name of the WayService service.
	WayServiceName = "way.v1.WayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WayServiceGetLinesProcedure is the fully-qualified name of the WayService's GetLines RPC.
	WayServiceGetLinesProcedure = "/way.v1.WayService/GetLines"
)

// WayServiceClient is a client for the way.v1.WayService service.
type WayServiceClient interface {
	GetLines(context.Context, *connect_go.Request[v1.GetLinesRequest]) (*connect_go.Response[v1.GetLinesResponse], error)
}

// NewWayServiceClient constructs a client for the way.v1.WayService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWayServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wayServiceClient{
		getLines: connect_go.NewClient[v1.GetLinesRequest, v1.GetLinesResponse](
			httpClient,
			baseURL+WayServiceGetLinesProcedure,
			opts...,
		),
	}
}

// wayServiceClient implements WayServiceClient.
type wayServiceClient struct {
	getLines *connect_go.Client[v1.GetLinesRequest, v1.GetLinesResponse]
}

// GetLines calls way.v1.WayService.GetLines.
func (c *wayServiceClient) GetLines(ctx context.Context, req *connect_go.Request[v1.GetLinesRequest]) (*connect_go.Response[v1.GetLinesResponse], error) {
	return c.getLines.CallUnary(ctx, req)
}

// WayServiceHandler is an implementation of the way.v1.WayService service.
type WayServiceHandler interface {
	GetLines(context.Context, *connect_go.Request[v1.GetLinesRequest]) (*connect_go.Response[v1.GetLinesResponse], error)
}

// NewWayServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWayServiceHandler(svc WayServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	wayServiceGetLinesHandler := connect_go.NewUnaryHandler(
		WayServiceGetLinesProcedure,
		svc.GetLines,
		opts...,
	)
	return "/way.v1.WayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WayServiceGetLinesProcedure:
			wayServiceGetLinesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWayServiceHandler struct{}

func (UnimplementedWayServiceHandler) GetLines(context.Context, *connect_go.Request[v1.GetLinesRequest]) (*connect_go.Response[v1.GetLinesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("way.v1.WayService.GetLines is not implemented"))
}
